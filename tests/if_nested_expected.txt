Parsing completed
Syntax Tree:
TypeDeclaration 'Program'
  [0]: 
    Function 'main'
      type:
        null
      statements:
        [0]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionLiteralSyntax '%i'
                  [1]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'getNum'
                          [0]: 
                            ExpressionLiteralSyntax '1'
        [1]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionLiteralSyntax '%i'
                  [1]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'getNum'
                          [0]: 
                            ExpressionLiteralSyntax '2'
        [2]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionLiteralSyntax '%i'
                  [1]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'getNum'
                          [0]: 
                            ExpressionLiteralSyntax '42'
  [1]: 
    Function 'getNum'
      arguments:
          [0]: 
            FunctionArg 'n'
              type:
                Type 'int'
      type:
        Type 'int'
      statements:
        [0]: 
          IfStatementSyntax
            condition:
              ExpressionBinOpSyntax
                Op: '<'
                left: 
                  VarOrCallChainSyntax
                    [0]: 
                      VariableOrCall 'n'
                right: 
                  ExpressionLiteralSyntax '2'
            true branch statements:
              [0]: 
                ReturnStatementSyntax
                  value:
                    ExpressionLiteralSyntax '1'
            false branch statements:
              [0]: 
                IfStatementSyntax
                  condition:
                    ExpressionBinOpSyntax
                      Op: '<'
                      left: 
                        VarOrCallChainSyntax
                          [0]: 
                            VariableOrCall 'n'
                      right: 
                        ExpressionLiteralSyntax '3'
                  true branch statements:
                    [0]: 
                      ReturnStatementSyntax
                        value:
                          ExpressionLiteralSyntax '2'
                  false branch statements:
                    [0]: 
                      ReturnStatementSyntax
                        value:
                          ExpressionLiteralSyntax '100'

Compiled module:
Module if_nested
  Type Program
    Function main()
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
    Function getNum(n: int): int
      LunaCompiler.IfStatement

Generated Cpp code:
#include "stdio.h"
#include "stdarg.h"
class Console {
public:
  static void writeLine(const char* msg, ...) {
    va_list argp;
    va_start(argp, msg);
    vfprintf(stdout, msg, argp);
    fprintf(stdout, "\n");
    va_end(argp);
  }
};

class Program {
public:
  static void main() {
    Console::writeLine("%i", Program::getNum(1));
    Console::writeLine("%i", Program::getNum(2));
    Console::writeLine("%i", Program::getNum(42));
  }
  static int getNum(int n) {
    if (n < 2) {
      return 1;
    } else {
      if (n < 3) {
        return 2;
      } else {
        return 100;
      }
    }
  }
};
int main() {
  Program::main();
}

Program output:
1
2
100
