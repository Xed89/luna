Parsing completed
Syntax Tree:
TypeDeclaration 'Program'
  [0]: 
    Function 'main'
      type:
        null
      statements:
        [0]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionLiteralSyntax '%i'
                  [1]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'getNumA'
                          [0]: 
                            ExpressionLiteralSyntax '1'
        [1]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionLiteralSyntax '%i'
                  [1]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'getNumA'
                          [0]: 
                            ExpressionLiteralSyntax '2'
        [2]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionLiteralSyntax '%i'
                  [1]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'getNumA'
                          [0]: 
                            ExpressionLiteralSyntax '42'
        [3]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionLiteralSyntax '%i'
                  [1]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'getNumB'
                          [0]: 
                            ExpressionLiteralSyntax '1'
        [4]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionLiteralSyntax '%i'
                  [1]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'getNumB'
                          [0]: 
                            ExpressionLiteralSyntax '2'
        [5]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionLiteralSyntax '%i'
                  [1]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'getNumB'
                          [0]: 
                            ExpressionLiteralSyntax '3'
        [6]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionLiteralSyntax '%i'
                  [1]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'getNumB'
                          [0]: 
                            ExpressionLiteralSyntax '42'
        [7]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionLiteralSyntax '%i'
                  [1]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'getNumC'
                          [0]: 
                            ExpressionLiteralSyntax '1'
        [8]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionLiteralSyntax '%i'
                  [1]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'getNumC'
                          [0]: 
                            ExpressionLiteralSyntax '2'
        [9]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionLiteralSyntax '%i'
                  [1]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'getNumC'
                          [0]: 
                            ExpressionLiteralSyntax '3'
        [10]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionLiteralSyntax '%i'
                  [1]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'getNumC'
                          [0]: 
                            ExpressionLiteralSyntax '42'
  [1]: 
    Function 'getNumA'
      arguments:
          [0]: 
            FunctionArg 'n'
              type:
                Type 'int'
      type:
        Type 'int'
      statements:
        [0]: 
          IfStatementSyntax
            condition:
              ExpressionBinOpSyntax
                Op: '<'
                left: 
                  VarOrCallChainSyntax
                    [0]: 
                      VariableOrCall 'n'
                right: 
                  ExpressionLiteralSyntax '2'
            true branch statements:
              [0]: 
                ReturnStatementSyntax
                  value:
                    ExpressionLiteralSyntax '1'
            false branch statements:
              [0]: 
                IfStatementSyntax
                  condition:
                    ExpressionBinOpSyntax
                      Op: '<'
                      left: 
                        VarOrCallChainSyntax
                          [0]: 
                            VariableOrCall 'n'
                      right: 
                        ExpressionLiteralSyntax '3'
                  true branch statements:
                    [0]: 
                      ReturnStatementSyntax
                        value:
                          ExpressionLiteralSyntax '2'
                  false branch statements:
                    [0]: 
                      ReturnStatementSyntax
                        value:
                          ExpressionLiteralSyntax '100'
  [2]: 
    Function 'getNumB'
      arguments:
          [0]: 
            FunctionArg 'n'
              type:
                Type 'int'
      type:
        Type 'int'
      statements:
        [0]: 
          IfStatementSyntax
            condition:
              ExpressionBinOpSyntax
                Op: '<'
                left: 
                  VarOrCallChainSyntax
                    [0]: 
                      VariableOrCall 'n'
                right: 
                  ExpressionLiteralSyntax '2'
            true branch statements:
              [0]: 
                ReturnStatementSyntax
                  value:
                    ExpressionLiteralSyntax '1'
            false branch statements:
              [0]: 
                IfStatementSyntax
                  condition:
                    ExpressionBinOpSyntax
                      Op: '<'
                      left: 
                        VarOrCallChainSyntax
                          [0]: 
                            VariableOrCall 'n'
                      right: 
                        ExpressionLiteralSyntax '3'
                  true branch statements:
                    [0]: 
                      ReturnStatementSyntax
                        value:
                          ExpressionLiteralSyntax '2'
                  false branch statements:
                    [0]: 
                      IfStatementSyntax
                        condition:
                          ExpressionBinOpSyntax
                            Op: '<'
                            left: 
                              VarOrCallChainSyntax
                                [0]: 
                                  VariableOrCall 'n'
                            right: 
                              ExpressionLiteralSyntax '4'
                        true branch statements:
                          [0]: 
                            ReturnStatementSyntax
                              value:
                                ExpressionLiteralSyntax '3'
                        false branch statements:
                          [0]: 
                            ReturnStatementSyntax
                              value:
                                ExpressionLiteralSyntax '100'
  [3]: 
    Function 'getNumC'
      arguments:
          [0]: 
            FunctionArg 'n'
              type:
                Type 'int'
      type:
        Type 'int'
      statements:
        [0]: 
          IfStatementSyntax
            condition:
              ExpressionBinOpSyntax
                Op: '<'
                left: 
                  VarOrCallChainSyntax
                    [0]: 
                      VariableOrCall 'n'
                right: 
                  ExpressionLiteralSyntax '2'
            true branch statements:
              [0]: 
                ReturnStatementSyntax
                  value:
                    ExpressionLiteralSyntax '1'
            false branch statements:
              [0]: 
                IfStatementSyntax
                  condition:
                    ExpressionBinOpSyntax
                      Op: '<'
                      left: 
                        VarOrCallChainSyntax
                          [0]: 
                            VariableOrCall 'n'
                      right: 
                        ExpressionLiteralSyntax '3'
                  true branch statements:
                    [0]: 
                      ReturnStatementSyntax
                        value:
                          ExpressionLiteralSyntax '2'
        [1]: 
          ReturnStatementSyntax
            value:
              ExpressionLiteralSyntax '100'

Compiled module:
Module if_nested
  Type Program
    Function main()
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
    Function getNumA(n: int): int
      LunaCompiler.IfStatement
    Function getNumB(n: int): int
      LunaCompiler.IfStatement
    Function getNumC(n: int): int
      LunaCompiler.IfStatement
      LunaCompiler.ReturnStatement

Generated Cpp code:
#include "stdio.h"
#include "stdarg.h"
class Console {
public:
  static void writeLine(const char* msg, ...) {
    va_list argp;
    va_start(argp, msg);
    vfprintf(stdout, msg, argp);
    fprintf(stdout, "\n");
    va_end(argp);
  }
};

class Program {
public:
  static void main() {
    Console::writeLine("%i", Program::getNumA(1));
    Console::writeLine("%i", Program::getNumA(2));
    Console::writeLine("%i", Program::getNumA(42));
    Console::writeLine("%i", Program::getNumB(1));
    Console::writeLine("%i", Program::getNumB(2));
    Console::writeLine("%i", Program::getNumB(3));
    Console::writeLine("%i", Program::getNumB(42));
    Console::writeLine("%i", Program::getNumC(1));
    Console::writeLine("%i", Program::getNumC(2));
    Console::writeLine("%i", Program::getNumC(3));
    Console::writeLine("%i", Program::getNumC(42));
  }
  static int getNumA(int n) {
    if (n < 2) {
      return 1;
    } else {
      if (n < 3) {
        return 2;
      } else {
        return 100;
      }
    }
  }
  static int getNumB(int n) {
    if (n < 2) {
      return 1;
    } else {
      if (n < 3) {
        return 2;
      } else {
        if (n < 4) {
          return 3;
        } else {
          return 100;
        }
      }
    }
  }
  static int getNumC(int n) {
    if (n < 2) {
      return 1;
    } else {
      if (n < 3) {
        return 2;
      }
    }
    return 100;
  }
};
int main() {
  Program::main();
}

Program output:
1
2
100
1
2
3
100
1
2
100
100
