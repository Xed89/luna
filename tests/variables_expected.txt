Parsing completed
Syntax Tree:
TypeDeclaration 'Program'
  [0]: 
    Function 'main' (static)
      type:
        null
      statements:
        [0]: 
          DeclarationStatementSyntax
            let number1
              ExpressionSyntax '57'
        [1]: 
          DeclarationStatementSyntax
            var number2
              ExpressionSyntax '82'
        [2]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionSyntax 'Before assign, number1: %i, number2: %i'
                  [1]: 
                    ExpressionSyntax 'number1'
                  [2]: 
                    ExpressionSyntax 'number2'
        [3]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'number2'
              ExpressionSyntax '93'
        [4]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionSyntax 'After assign, number1: %i, number2: %i'
                  [1]: 
                    ExpressionSyntax 'number1'
                  [2]: 
                    ExpressionSyntax 'number2'

Compiled module:
Module variables
  Type Program
    Function main()
      LunaCompiler.DeclarationStatement
      LunaCompiler.DeclarationStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
  String constants

Generated Cpp code:
#include "stdio.h"
#include "stdarg.h"
class Console {
public:
  static void writeLine(const char* msg, ...) {
    va_list argp;
    va_start(argp, msg);
    vfprintf(stdout, msg, argp);
    fprintf(stdout, "\n");
    va_end(argp);
  }
};

class Program {
public:
  static void main() {
    int number1 = 57;
    int number2 = 82;
    Console::writeLine("Before assign, number1: %i, number2: %i", number1, number2);
    number2 = 93;
    Console::writeLine("After assign, number1: %i, number2: %i", number1, number2);
  }
};
int main() {
  Program::main();
}

Program output:
Before assign, number1: 57, number2: 82
After assign, number1: 57, number2: 93
