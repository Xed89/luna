Parsing completed
Syntax Tree:
TypeDeclaration 'Program'
  [0]: 
    Function 'main'
      type:
        null
      statements:
        [0]: 
          DeclarationStatementSyntax
            let n1
              ExpressionLiteralSyntax '57'
        [1]: 
          DeclarationStatementSyntax
            var n2
              ExpressionLiteralSyntax '82'
        [2]: 
          DeclarationStatementSyntax
            var s1
              ExpressionLiteralSyntax 'Hi'
        [3]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionLiteralSyntax 'n1: %i, n2: %i, s1: %s'
                  [1]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'n1'
                  [2]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'n2'
                  [3]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 's1'
        [4]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'n2'
              ExpressionLiteralSyntax '93'
        [5]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 's1'
              ExpressionLiteralSyntax 'Hey'
        [6]: 
          VarOrCallChainMaybeAssignStatementSyntax
            VarOrCallChainSyntax
              [0]: 
                VariableOrCall 'Console'
              [1]: 
                VariableOrCall 'writeLine'
                  [0]: 
                    ExpressionLiteralSyntax 'n1: %i, n2: %i, s1: %s'
                  [1]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'n1'
                  [2]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 'n2'
                  [3]: 
                    VarOrCallChainSyntax
                      [0]: 
                        VariableOrCall 's1'

Compiled module:
Module variables
  Type Program
    Function main()
      LunaCompiler.DeclarationStatement
      LunaCompiler.DeclarationStatement
      LunaCompiler.DeclarationStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement
      LunaCompiler.VarOrCallChainMaybeAssignStatement

Generated Cpp code:
#include "stdio.h"
#include "stdarg.h"
class Console {
public:
  static void writeLine(const char* msg, ...) {
    va_list argp;
    va_start(argp, msg);
    vfprintf(stdout, msg, argp);
    fprintf(stdout, "\n");
    va_end(argp);
  }
};

class Program {
public:
  static void main() {
    int n1 = 57;
    int n2 = 82;
    const char* s1 = "Hi";
    Console::writeLine("n1: %i, n2: %i, s1: %s", n1, n2, s1);
    n2 = 93;
    s1 = "Hey";
    Console::writeLine("n1: %i, n2: %i, s1: %s", n1, n2, s1);
  }
};
int main() {
  Program::main();
}

Program output:
n1: 57, n2: 82, s1: Hi
n1: 57, n2: 93, s1: Hey
